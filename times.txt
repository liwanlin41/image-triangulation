Averages per call

6/23: pixDoubleInt 556ms; pixEnergyInt 550ms; pixLineInt 276ms; Pixel::intersectionArea 1.8ms which is the bulk of integration process

6/24: intersecting all four sides of pixel with a segment takes 600us but intersecting all pixels takes 120ms; just creating the segments for intersection takes only 12us for all pixels though
Significant speed increase: change segment intersection detection to avoid using Matrix class (which required dynamic allocation):
New averages pixDoubleInt 83ms, pixEnergyInt 82ms, pixLineInt 1.1ms; intersectionArea is something like 600us

6/26: added gridded area approximation, for some reason this is super slow? (~3s per call for grid size of 10x10)
ahhhh - Matrix was still used in Triangle::getSignedArea, removing gets double integral down to 800us

6/28: running some more tests: 50 ish triangles on 260x200 image runs in ~1ms per integration call, same number of triangles on 800x464 runs in 4ms per line integral and 7ms per area integral; speed of single integration call is independent of number of triangles, seems to depend on pixel resolution

6/29: apple.jpeg 41 iterations, colorized, 320 triangles
GPU activities:   44.67%  56.2863s     78720  715.02us  583.04us  12.779ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  42.92%  54.0837s     53760  1.0060ms  902.91us  2.7252ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                  10.56%  13.3052s     13440  989.97us  911.78us  1.6589ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)
flower.jpg 31 iterations, colorized
GPU activities:   45.02%  29.7278s     39804  746.86us  586.24us  10.350ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  42.70%  28.1935s     27392  1.0293ms  868.25us  6.8069ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                  10.48%  6.92015s      6848  1.0105ms  915.04us  1.5629ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)
rose.jpg 12 iterations, 347 triangles
GPU activities:   44.36%  22.6960s     18044  1.2578ms  1.1159ms  3.3495ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                  43.21%  22.1060s     24984  884.81us  747.16us  2.1420ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  10.90%  5.57581s      4511  1.2360ms  1.1241ms  1.7361ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)

6/30
sunset.jpg (600x337) 286 triangles, 10 iterations
GPU activities:   50.25%  168.765s     12584  13.411ms  4.0802ms  40.586ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                  34.32%  115.272s     17160  6.7175ms  2.6373ms  30.798ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  12.34%  41.4382s      3146  13.172ms  4.5688ms  40.016ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)
panda.jpeg (2000x1125) 202 triangles, 2 iterations
GPU activities:   53.03%  107.515s      2424  44.354ms  43.651ms  112.96ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                  32.94%  66.7960s      2424  27.556ms  27.356ms  38.183ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  13.20%  26.7707s       606  44.176ms  43.657ms  50.041ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)
panda.jpeg, 1200 triangles
GPU activities:   45.71%  1.1e+03s     24000  44.447ms  43.600ms  104.49ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                  42.03%  980.787s     35536  27.600ms  27.442ms  40.270ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  11.39%  265.916s      6000  44.319ms  43.582ms  50.989ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)
panda.jpeg (cropped to 1251x1124), 1086 triangles, 6 iterations
GPU activities:   48.20%  835.881s     30408  27.489ms  26.845ms  71.128ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                  38.94%  675.410s     39096  17.276ms  16.855ms  29.318ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  11.96%  207.493s      7602  27.295ms  26.859ms  31.799ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)
cropped panda, 1239 triangles, 10 iterations
GPU activities:   47.14%  1.5e+03s     54516  27.622ms  27.016ms  65.186ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                  40.21%  1.3e+03s     74340  17.280ms  16.942ms  31.565ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  11.76%  375.583s     13629  27.558ms  27.003ms  36.439ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)

7/1:
using apple.jpeg, gridded pixel approximation with a 4x4 grid takes 500us per call but it overestimates the actual value rather significantly (~5%); scales very poorly, 10x10 grid is slower than the exact computation; this is impractical and inaccurate
with boundary point weighting, improves to 5x5 grid taking 550us and only 1% overestimate; with 20x20 can get 0.1% but this is much much slower (~7ms per call); 5x5 does okay on the panda though with half the time of exact area and accurracy within 0.01%
cropped panda, 1239 triangles, 1 iteration, 5x5
GPU activities:   60.27%  360.856s      7434  48.541ms  19.398ms  126.36ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  29.33%  175.578s      9912  17.714ms  16.081ms  61.282ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                   7.30%  43.6898s      2478  17.631ms  16.994ms  21.549ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)
cropped panda, 1239 triangles, 1 iteration, 2x2 (surprisingly reasonable approximations)
GPU activities:   81.89%  380.238s      7434  51.149ms  19.405ms  106.21ms  pixConstantLineInt(Pixel*, int, int, Point*, Point*, Point*, bool, double*)
                  10.88%  50.5202s      9912  5.0969ms  3.3213ms  45.848ms  pixConstantDoubleInt(Pixel*, int, int, Triangle*, int, double*, ColorChannel)
                   4.49%  20.8497s     59472  350.58us  7.0720us  5.2720ms  sumBlock(double*, int, double*)
                   2.74%  12.7082s      2478  5.1284ms  4.6496ms  7.4348ms  pixConstantEnergyInt(Pixel*, int, int, Triangle*, double*, int, double*)
2x2 is terrible approximation on apple.jpeg though, causes energy computation to blow up and step size to vanish as colors keep increasing on tiny triangle? what's happening - double integral stays same because approximation is so coarse, but area goes to 0 because area computation is exact
seems 5x5 is decent

7/2:
on the other hand barycentric sampling is consistently under but it is FAST (sampling every 0.5 gives 30us per call on apple with 320 triangles, compared to 1ms for exact)
sampling every 0.05 gives 1% error rate and 160us per call; sampling every 0.02 gives 0.5% error and 900us per call (basically same as exact)
apple.jpeg, 320 triangles, sample every 0.01 is 700us per call and within 1% approximation; sample every 0.05 is 50us per call and 10% approximation; 0.02 is 150us and 2%
panda.jpeg, 1239 triangles: 0.05 is 130us per call and very accurate approximation
^ dumb mistake, actually using the middle length side to get num samples gives 1% approximation with 0.1 sample step on apple.jpeg, runtime 50us
with approximate line integral, confirmed that as ds decreases each individual line integral approaches exact value; however the difference seems to add up across all segments and the final energy difference after a gradient step is significantly different (though this is likely due to step size being different because some triangles may be farther from inverting)

7/6:
sample apple.jpeg with ds of 0.1, sampling line integral 5 times as frequently; 320 triangles, 7 iterations
GPU activities:   56.04%  1.31816s     30720  42.908us  8.5120us  1.0692ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  22.86%  537.69ms     67446  7.9720us  4.6400us  985.55us  sumBlock(double*, int, double*)
                  16.31%  383.76ms     12800  29.981us  8.6400us  1.1987ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                   4.79%  112.65ms      4160  27.079us  8.8000us  467.34us  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   79.60%  2.28871s     47680  48.001us  2.0610us  1.4290ms  cudaDeviceSynchronize
41 iterations with line integral sampling ds/4:
GPU activities:   55.25%  5.72382s    157440  36.355us  7.5510us  1.2060ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  24.47%  2.53507s    332366  7.6270us  5.1830us  1.0018ms  sumBlock(double*, int, double*)
                  15.17%  1.57149s     60480  25.983us  8.5750us  804.48us  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                   5.11%  529.05ms     20160  26.242us  8.7030us  464.39us  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   79.87%  9.78880s    238080  41.115us  1.8300us  1.5624ms  cudaDeviceSynchronize


GOAL: increase speed of sumBlock

vase running to completion with 1598 triangles
GPU activities:   54.00%  25.9797s    402696  64.514us  9.6320us  1.3968ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  25.84%  12.4335s   1062676  11.700us  5.8880us  3.2208ms  sumBlock(double*, int, double*)
                  15.44%  7.43089s    148614  50.001us  11.521us  8.3468ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                   4.72%  2.27068s     43146  52.627us  12.352us  6.5882ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   87.66%  46.9362s    594456  78.956us  1.8820us  11.058ms  cudaDeviceSynchronize
With both warp unroll and add on first load:
GPU activities:   61.46%  25.6676s    402696  63.739us  10.272us  1.4215ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  17.73%  7.40586s    148614  49.832us  11.168us  8.2474ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                  15.28%  6.38245s    802724  7.9500us  3.5520us  1.6369ms  sumBlock(double*, int, double*)
                   5.52%  2.30402s     43146  53.400us  12.288us  7.1156ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   86.64%  40.9434s    594456  68.875us  2.0230us  9.1445ms  cudaDeviceSynchronize

Completely unrolled:
GPU activities:   64.55%  19.7032s    402696  48.928us  6.9760us  1.2744ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  16.47%  5.02743s    148614  33.828us  8.3840us  8.3042ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                  13.98%  4.26731s    802724  5.3160us  2.5920us  1.0157ms  sumBlock(double*, int, double*)
                   5.01%  1.52814s     43146  35.417us  8.8000us  4.6879ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   83.12%  28.8949s    594456  48.607us  1.8670us  9.1353ms  cudaDeviceSynchronize

7/7:
vase.jpg 11139 triangles to completion (11 iterations)
GPU activities:   61.09%  35.8679s   1470348  24.394us  6.7830us  1.0633ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  21.95%  12.8873s   2836222  4.5430us  2.5920us  1.0228ms  sumBlock(double*, int, double*)
                  13.39%  7.86121s    545811  14.402us  7.0390us  5.7347ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                   3.58%  2.09929s    144807  14.497us  7.3910us  4.6990ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   74.46%  53.6046s   2160966  24.805us  1.3140us  6.3058ms  cudaDeviceSynchronize

panda.jpeg 27136 triangles to completion (5 iterations)
GPU activities:   55.30%  33.0299s   1628160  20.286us  6.5920us  1.4110ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  24.50%  14.6345s   3119665  4.6910us  2.6240us  1.5504ms  sumBlock(double*, int, double*)
                  16.10%  9.61875s    651264  14.769us  5.6640us  2.5448ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                   4.09%  2.44255s    162816  15.001us  5.8560us  1.9227ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   72.59%  55.3896s   2442240  22.679us  1.3030us  8.3018ms  cudaDeviceSynchronize
panda.jpeg 13014 triangles to completion (8 iterations)
GPU activities:   59.76%  34.0090s   1249344  27.221us  6.8150us  8.6128ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  20.73%  11.7944s   2446068  4.8210us  2.5920us  1.3757ms  sumBlock(double*, int, double*)
                  15.55%  8.84888s    468504  18.887us  5.7590us  6.9401ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                   3.97%  2.25667s    117126  19.266us  5.8560us  4.9903ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   75.17%  51.5837s   1834974  28.111us  1.3430us  8.6138ms  cudaDeviceSynchronize
panda.jpeg 7160 triangles to completion (8 iterations)
GPU activities:   61.38%  23.8462s    687360  34.692us  6.8150us  1.0706ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  17.29%  6.71663s   1365050  4.9200us  2.5920us  1.7422ms  sumBlock(double*, int, double*)
                  16.97%  6.59301s    257760  25.578us  7.8080us  4.2805ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                   4.36%  1.69190s     64440  26.255us  8.3200us  2.1915ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   80.34%  36.3484s   1009560  36.004us  1.4540us  6.8906ms  cudaDeviceSynchronize
panda.jpeg 4068 triangles to completion (7 iterations)
GPU activities:   60.47%  14.7595s    341712  43.192us  6.8480us  1.2575ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  19.22%  4.69181s    130176  36.042us  7.9680us  4.1396ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                  15.40%  3.75796s    696895  5.3920us  2.6230us  1.0080ms  sumBlock(double*, int, double*)
                   4.91%  1.19745s     32544  36.794us  8.8320us  3.4883ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
      API calls:   83.32%  23.2277s    504432  46.047us  1.5620us  4.5993ms  cudaDeviceSynchronize
panda.jpeg 1848 triangles to completion (10 iterations)
GPU activities:   55.70%  11.1161s    221760  50.126us  6.8160us  1.0872ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  24.07%  4.80240s     81312  59.061us  8.5760us  3.0481ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                  14.16%  2.82491s    464291  6.0840us  2.6240us  1.9966ms  sumBlock(double*, int, double*)
                   6.07%  1.21192s     20328  59.618us  8.7040us  1.9411ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   85.11%  19.0258s    323400  58.830us  1.7860us  3.8332ms  cudaDeviceSynchronize
panda.jpeg 1086 triangles to completion (7 iterations)
GPU activities:   45.41%  4.62908s     91224  50.744us  6.8800us  1.0706ms  constLineIntSample(Pixel*, int, Point*, Point*, bool, bool, double*, double, int)
                  32.27%  3.28954s     34752  94.657us  8.8640us  7.7367ms  constDoubleIntSample(Pixel*, int, Point*, Point*, Point*, double*, double, int, ColorChannel)
                  14.20%  1.44746s    221856  6.5240us  2.6230us  989.40us  sumBlock(double*, int, double*)
                   8.12%  827.69ms      8688  95.268us  8.9600us  3.6119ms  approxConstantEnergySample(Pixel*, int, Point*, Point*, Point*, double, double*, double, int)
     API calls:   86.86%  9.77674s    134664  72.601us  2.1020us  8.3767ms  cudaDeviceSynchronize

Conclusion: overall time grows with number of triangles; average call times decrease (because each triangle is smaller and thus requires fewer samples)

FEM BASIS RESTRUCTURING:
linear apple.jpeg, TRIM 0.05 runs for 84 iterations in 74.9461s, final energy 6.43552e+06
constant runs for 29 iterations in 4.14554s final energy 9.59771e+06

GPU activities:   41.70%  33.1988s    645120  51.461us  12.576us  1.0731ms  linearLineIntSample
                  17.59%  14.0065s   2475332  5.6580us  2.5920us  1.0218ms  sumBlock
                  13.79%  10.9783s    337920  32.487us  9.6310us  1.3751ms  linearDoubleIntSample
                  12.76%  10.1616s    241920  42.004us  12.288us  1.0619ms  linearImageGradientY
                  12.75%  10.1494s    241920  41.953us  12.415us  1.0473ms  linearImageGradientX
                   1.42%  1.12673s     31040  36.299us  10.144us  1.0268ms  approxLinearEnergySample

linear 93 iterations final energy 6.50833e+06
GPU activities:   45.02%  36.9388s    714240  51.717us  12.544us  1.2540ms  linearLineIntSample
                  18.66%  15.3086s   2706292  5.6560us  2.6230us  2.8428ms  sumBlock
                  13.87%  11.3830s    267840  42.499us  12.351us  1.4040ms  linearImageGradientX
                  13.82%  11.3417s    267840  42.344us  12.319us  1.2077ms  linearImageGradientY
                   7.24%  5.93701s    120320  49.343us  12.992us  1.5556ms  linearDoubleIntSample
                   1.40%  1.14894s     30080  38.196us  10.175us  1.1451ms  approxLinearEnergySample
     API calls:   83.87%  80.1159s   1640960  48.822us  1.2540us  5.7657ms  cudaDeviceSynchronize

after modifying line integral: linear 70 iterations energy 6.26076e+06
GPU activities:   27.70%  12.7203s    537600  23.661us  7.0080us  1.5195ms  linearLineIntSample
                  23.14%  10.6246s   2012577  5.2790us  2.5920us  1.0224ms  sumBlock
                  18.14%  8.33162s    201600  41.327us  12.352us  1.4166ms  linearImageGradientX
                  18.06%  8.29218s    201600  41.131us  12.320us  1.2718ms  linearImageGradientY
                  10.74%  4.93224s     99200  49.720us  13.024us  1.8576ms  linearDoubleIntSample
                   2.22%  1.02028s     31040  32.869us  10.144us  1.3181ms  approxLinearEnergySample
     API calls:   79.20%  43.0133s   1269440  33.883us  1.1990us  2.0991ms  cudaDeviceSynchronize

after modifying gradient integral: linear 70 iterations energy 6.49494e+06
GPU activities:   35.21%  13.0951s    537600  24.358us  7.0400us  1.2063ms  linearLineIntSample
                  27.72%  10.3083s   1948577  5.2900us  2.6240us  1.0310ms  sumBlock
                  11.64%  4.32852s     67200  64.412us  14.848us  1.4090ms  linearImageGradientX
                  11.61%  4.31857s     67200  64.264us  14.816us  1.4318ms  linearImageGradientY
                  11.58%  4.30510s     91200  47.204us  12.960us  1.8430ms  linearDoubleIntSample
                   2.25%  835.76ms     23040  36.274us  10.112us  1.2442ms  approxLinearEnergySample
     API calls:   77.11%  35.4108s   1237440  28.616us  1.2650us  9.4897ms  cudaDeviceSynchronize

